#!/usr/bin/env python3
"""Simple CapLang -> Python compiler CLI.

Usage:
  bin/capla-compile input.capla --out output.py

This is a lightweight wrapper around the project's `Compiler` class. It
preserves the small bootstrap used by `src/run.py` so compiled scripts can
import local packages when executed from the examples/ folder.
"""
import argparse
import os
import sys

repo_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
# ensure the `src` folder is on sys.path so local imports like lexer/parser work
sys.path.insert(0, os.path.join(repo_root, 'src'))
sys.path.insert(0, repo_root)

from lexer import Lexer
from parser import Parser, ExpressionStmt
from compiler import Compiler


def main():
    p = argparse.ArgumentParser(description='CapLang -> Python compiler')
    p.add_argument('path', help='Path to a .capla source file')
    p.add_argument('--out', '-o', help='Output Python file path (default: stdout)')
    args = p.parse_args()

    path = args.path
    if not os.path.isfile(path):
        print(f"Source file not found: {path}")
        return 2

    with open(path, 'r', encoding='utf-8') as f:
        src = f.read()

    tokens = Lexer(src).scan_tokens()
    stmts = Parser(tokens).parse()

    comp = Compiler()
    # If single expression statement, compile just the expression and wrap with print
    from parser import ExpressionStmt
    if len(stmts) == 1 and isinstance(stmts[0], ExpressionStmt):
        python_code = f"print({comp.compile_expr(stmts[0].expression)})\n"
    else:
        python_code = comp.compile_program(stmts) + "\n"

    if args.out:
        repo_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
        bootstrap = (
            "import sys, os\n"
            f"sys.path.insert(0, {repr(repo_root)})\n\n"
        )
        with open(args.out, 'w', encoding='utf-8') as outf:
            outf.write(bootstrap + python_code)
        print(f"Wrote compiled Python to {args.out}")
        return 0

    # otherwise print compiled code to stdout
    print(python_code)
    return 0


if __name__ == '__main__':
    raise SystemExit(main())
